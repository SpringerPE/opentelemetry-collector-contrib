// Code generated by mdatagen. DO NOT EDIT.

package metadata

import (
	"go.opentelemetry.io/collector/pdata/pcommon"
)

// ResourceBuilder is a helper struct to build resources predefined in metadata.yaml.
// The ResourceBuilder is not thread-safe and must not to be used in multiple goroutines.
type ResourceBuilder struct {
	config ResourceAttributesConfig
	res    pcommon.Resource
}

// NewResourceBuilder creates a new ResourceBuilder. This method should be called on the start of the application.
func NewResourceBuilder(rac ResourceAttributesConfig) *ResourceBuilder {
	return &ResourceBuilder{
		config: rac,
		res:    pcommon.NewResource(),
	}
}

// SetCloudfoundryAppAnnotationsX sets provided value as "cloudfoundry.app.annotations.X" attribute.
func (rb *ResourceBuilder) SetCloudfoundryAppAnnotationsX(val string) {
	if rb.config.CloudfoundryAppAnnotationsX.Enabled {
		rb.res.Attributes().PutStr("cloudfoundry.app.annotations.X", val)
	}
}

// SetCloudfoundryAppCreated sets provided value as "cloudfoundry.app.created" attribute.
func (rb *ResourceBuilder) SetCloudfoundryAppCreated(val string) {
	if rb.config.CloudfoundryAppCreated.Enabled {
		rb.res.Attributes().PutStr("cloudfoundry.app.created", val)
	}
}

// SetCloudfoundryAppLabelsX sets provided value as "cloudfoundry.app.labels.X" attribute.
func (rb *ResourceBuilder) SetCloudfoundryAppLabelsX(val string) {
	if rb.config.CloudfoundryAppLabelsX.Enabled {
		rb.res.Attributes().PutStr("cloudfoundry.app.labels.X", val)
	}
}

// SetCloudfoundryAppLifecycleBuildpacksI sets provided value as "cloudfoundry.app.lifecycle.buildpacks.I" attribute.
func (rb *ResourceBuilder) SetCloudfoundryAppLifecycleBuildpacksI(val string) {
	if rb.config.CloudfoundryAppLifecycleBuildpacksI.Enabled {
		rb.res.Attributes().PutStr("cloudfoundry.app.lifecycle.buildpacks.I", val)
	}
}

// SetCloudfoundryAppLifecycleStack sets provided value as "cloudfoundry.app.lifecycle.stack" attribute.
func (rb *ResourceBuilder) SetCloudfoundryAppLifecycleStack(val string) {
	if rb.config.CloudfoundryAppLifecycleStack.Enabled {
		rb.res.Attributes().PutStr("cloudfoundry.app.lifecycle.stack", val)
	}
}

// SetCloudfoundryAppLifecycleType sets provided value as "cloudfoundry.app.lifecycle.type" attribute.
func (rb *ResourceBuilder) SetCloudfoundryAppLifecycleType(val string) {
	if rb.config.CloudfoundryAppLifecycleType.Enabled {
		rb.res.Attributes().PutStr("cloudfoundry.app.lifecycle.type", val)
	}
}

// SetCloudfoundryAppName sets provided value as "cloudfoundry.app.name" attribute.
func (rb *ResourceBuilder) SetCloudfoundryAppName(val string) {
	if rb.config.CloudfoundryAppName.Enabled {
		rb.res.Attributes().PutStr("cloudfoundry.app.name", val)
	}
}

// SetCloudfoundryAppState sets provided value as "cloudfoundry.app.state" attribute.
func (rb *ResourceBuilder) SetCloudfoundryAppState(val string) {
	if rb.config.CloudfoundryAppState.Enabled {
		rb.res.Attributes().PutStr("cloudfoundry.app.state", val)
	}
}

// SetCloudfoundryAppUpdated sets provided value as "cloudfoundry.app.updated" attribute.
func (rb *ResourceBuilder) SetCloudfoundryAppUpdated(val string) {
	if rb.config.CloudfoundryAppUpdated.Enabled {
		rb.res.Attributes().PutStr("cloudfoundry.app.updated", val)
	}
}

// SetCloudfoundryOrgAnnotationsX sets provided value as "cloudfoundry.org.annotations.X" attribute.
func (rb *ResourceBuilder) SetCloudfoundryOrgAnnotationsX(val string) {
	if rb.config.CloudfoundryOrgAnnotationsX.Enabled {
		rb.res.Attributes().PutStr("cloudfoundry.org.annotations.X", val)
	}
}

// SetCloudfoundryOrgLabelsX sets provided value as "cloudfoundry.org.labels.X" attribute.
func (rb *ResourceBuilder) SetCloudfoundryOrgLabelsX(val string) {
	if rb.config.CloudfoundryOrgLabelsX.Enabled {
		rb.res.Attributes().PutStr("cloudfoundry.org.labels.X", val)
	}
}

// SetCloudfoundryOrgName sets provided value as "cloudfoundry.org.name" attribute.
func (rb *ResourceBuilder) SetCloudfoundryOrgName(val string) {
	if rb.config.CloudfoundryOrgName.Enabled {
		rb.res.Attributes().PutStr("cloudfoundry.org.name", val)
	}
}

// SetCloudfoundrySpaceAnnotationsX sets provided value as "cloudfoundry.space.annotations.X" attribute.
func (rb *ResourceBuilder) SetCloudfoundrySpaceAnnotationsX(val string) {
	if rb.config.CloudfoundrySpaceAnnotationsX.Enabled {
		rb.res.Attributes().PutStr("cloudfoundry.space.annotations.X", val)
	}
}

// SetCloudfoundrySpaceLabelsX sets provided value as "cloudfoundry.space.labels.X" attribute.
func (rb *ResourceBuilder) SetCloudfoundrySpaceLabelsX(val string) {
	if rb.config.CloudfoundrySpaceLabelsX.Enabled {
		rb.res.Attributes().PutStr("cloudfoundry.space.labels.X", val)
	}
}

// SetCloudfoundrySpaceName sets provided value as "cloudfoundry.space.name" attribute.
func (rb *ResourceBuilder) SetCloudfoundrySpaceName(val string) {
	if rb.config.CloudfoundrySpaceName.Enabled {
		rb.res.Attributes().PutStr("cloudfoundry.space.name", val)
	}
}

// Emit returns the built resource and resets the internal builder state.
func (rb *ResourceBuilder) Emit() pcommon.Resource {
	r := rb.res
	rb.res = pcommon.NewResource()
	return r
}
