// Code generated by mdatagen. DO NOT EDIT.

package metadata

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestResourceBuilder(t *testing.T) {
	for _, tt := range []string{"default", "all_set", "none_set"} {
		t.Run(tt, func(t *testing.T) {
			cfg := loadResourceAttributesConfig(t, tt)
			rb := NewResourceBuilder(cfg)
			rb.SetCloudfoundryAppAnnotationsX("cloudfoundry.app.annotations.X-val")
			rb.SetCloudfoundryAppCreated("cloudfoundry.app.created-val")
			rb.SetCloudfoundryAppLabelsX("cloudfoundry.app.labels.X-val")
			rb.SetCloudfoundryAppLifecycleBuildpacksI("cloudfoundry.app.lifecycle.buildpacks.I-val")
			rb.SetCloudfoundryAppLifecycleStack("cloudfoundry.app.lifecycle.stack-val")
			rb.SetCloudfoundryAppLifecycleType("cloudfoundry.app.lifecycle.type-val")
			rb.SetCloudfoundryAppName("cloudfoundry.app.name-val")
			rb.SetCloudfoundryAppState("cloudfoundry.app.state-val")
			rb.SetCloudfoundryAppUpdated("cloudfoundry.app.updated-val")
			rb.SetCloudfoundryOrgAnnotationsX("cloudfoundry.org.annotations.X-val")
			rb.SetCloudfoundryOrgLabelsX("cloudfoundry.org.labels.X-val")
			rb.SetCloudfoundryOrgName("cloudfoundry.org.name-val")
			rb.SetCloudfoundrySpaceAnnotationsX("cloudfoundry.space.annotations.X-val")
			rb.SetCloudfoundrySpaceLabelsX("cloudfoundry.space.labels.X-val")
			rb.SetCloudfoundrySpaceName("cloudfoundry.space.name-val")

			res := rb.Emit()
			assert.Equal(t, 0, rb.Emit().Attributes().Len()) // Second call should return empty Resource

			switch tt {
			case "default":
				assert.Equal(t, 9, res.Attributes().Len())
			case "all_set":
				assert.Equal(t, 15, res.Attributes().Len())
			case "none_set":
				assert.Equal(t, 0, res.Attributes().Len())
				return
			default:
				assert.Failf(t, "unexpected test case: %s", tt)
			}

			val, ok := res.Attributes().Get("cloudfoundry.app.annotations.X")
			assert.True(t, ok)
			if ok {
				assert.EqualValues(t, "cloudfoundry.app.annotations.X-val", val.Str())
			}
			val, ok = res.Attributes().Get("cloudfoundry.app.created")
			assert.True(t, ok)
			if ok {
				assert.EqualValues(t, "cloudfoundry.app.created-val", val.Str())
			}
			val, ok = res.Attributes().Get("cloudfoundry.app.labels.X")
			assert.True(t, ok)
			if ok {
				assert.EqualValues(t, "cloudfoundry.app.labels.X-val", val.Str())
			}
			val, ok = res.Attributes().Get("cloudfoundry.app.lifecycle.buildpacks.I")
			assert.True(t, ok)
			if ok {
				assert.EqualValues(t, "cloudfoundry.app.lifecycle.buildpacks.I-val", val.Str())
			}
			val, ok = res.Attributes().Get("cloudfoundry.app.lifecycle.stack")
			assert.True(t, ok)
			if ok {
				assert.EqualValues(t, "cloudfoundry.app.lifecycle.stack-val", val.Str())
			}
			val, ok = res.Attributes().Get("cloudfoundry.app.lifecycle.type")
			assert.True(t, ok)
			if ok {
				assert.EqualValues(t, "cloudfoundry.app.lifecycle.type-val", val.Str())
			}
			val, ok = res.Attributes().Get("cloudfoundry.app.name")
			assert.True(t, ok)
			if ok {
				assert.EqualValues(t, "cloudfoundry.app.name-val", val.Str())
			}
			val, ok = res.Attributes().Get("cloudfoundry.app.state")
			assert.True(t, ok)
			if ok {
				assert.EqualValues(t, "cloudfoundry.app.state-val", val.Str())
			}
			val, ok = res.Attributes().Get("cloudfoundry.app.updated")
			assert.True(t, ok)
			if ok {
				assert.EqualValues(t, "cloudfoundry.app.updated-val", val.Str())
			}
			val, ok = res.Attributes().Get("cloudfoundry.org.annotations.X")
			assert.Equal(t, tt == "all_set", ok)
			if ok {
				assert.EqualValues(t, "cloudfoundry.org.annotations.X-val", val.Str())
			}
			val, ok = res.Attributes().Get("cloudfoundry.org.labels.X")
			assert.Equal(t, tt == "all_set", ok)
			if ok {
				assert.EqualValues(t, "cloudfoundry.org.labels.X-val", val.Str())
			}
			val, ok = res.Attributes().Get("cloudfoundry.org.name")
			assert.Equal(t, tt == "all_set", ok)
			if ok {
				assert.EqualValues(t, "cloudfoundry.org.name-val", val.Str())
			}
			val, ok = res.Attributes().Get("cloudfoundry.space.annotations.X")
			assert.Equal(t, tt == "all_set", ok)
			if ok {
				assert.EqualValues(t, "cloudfoundry.space.annotations.X-val", val.Str())
			}
			val, ok = res.Attributes().Get("cloudfoundry.space.labels.X")
			assert.Equal(t, tt == "all_set", ok)
			if ok {
				assert.EqualValues(t, "cloudfoundry.space.labels.X-val", val.Str())
			}
			val, ok = res.Attributes().Get("cloudfoundry.space.name")
			assert.Equal(t, tt == "all_set", ok)
			if ok {
				assert.EqualValues(t, "cloudfoundry.space.name-val", val.Str())
			}
		})
	}
}
